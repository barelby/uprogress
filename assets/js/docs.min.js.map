{"version":3,"sources":["../../../node_modules/mout/function/debounce.js","../../../node_modules/mout/math/clamp.js","../../../src/js/util.js","../../../src/js/uprogress.js"],"names":["fn","threshold","isAsap","timeout","result","debounced","args","arguments","context","this","clearTimeout","apply","setTimeout","cancel","val","min","max","CSS_PREFIXES","PREFIXED_PROP_CACHE","TRANSITION_END_EVENT","transition","MozTransition","OTransition","WebkitTransition","getVendorProp","reflow","element","offsetHeight","style","prop","value","styles","props","i","keys","Object","length","name","document","body","vendorName","charAt","toUpperCase","slice","getVendorCSSProp","replace","str","m1","toLowerCase","start","end","immediate","property","addEventListener","handler","event","propertyName","removeEventListener","keyCounter","allUProgress","DEFAULT","seal","rtl","duration","doneDuration","fadeDuration","class","barClass","blurClass","resizeDebounce","_onResize","debounce","uProgress","_parent","contains","_wrapper","refresh","destroy","UProgress","parent","opts","createElement","_progressbar","_blur","HTMLElement","_options","className","_opts","setAttribute","appendChild","_width","Math","scrollWidth","documentElement","clientWidth","offsetWidth","_key","_started","_completing","_destroyed","_to","_from","_duration","_end","_rtl","width","position","visibility","window","transform","_targetToPosition","opacity","_set","set","target","force","_done","_status","progress","done","status","options","parentWidth","transitionProgress","getBoundingClientRect","left","parentNode","removeChild","base","_extends","clamp","Date","now","_this","UProgressAPI","self","PUBLIC_METHODS","bind","freeze","defineProperty","get"],"mappings":"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","file":"docs.min.js","sourcesContent":["\n\n    /**\n     * Debounce callback execution\n     */\n    function debounce(fn, threshold, isAsap){\n        var timeout, result;\n        function debounced(){\n            var args = arguments, context = this;\n            function delayed(){\n                if (! isAsap) {\n                    result = fn.apply(context, args);\n                }\n                timeout = null;\n            }\n            if (timeout) {\n                clearTimeout(timeout);\n            } else if (isAsap) {\n                result = fn.apply(context, args);\n            }\n            timeout = setTimeout(delayed, threshold);\n            return result;\n        }\n        debounced.cancel = function(){\n            clearTimeout(timeout);\n        };\n        return debounced;\n    }\n\n    module.exports = debounce;\n\n\n","\n    /**\n     * Clamps value inside range.\n     */\n    function clamp(val, min, max){\n        return val < min? min : (val > max? max : val);\n    }\n    module.exports = clamp;\n\n","/* eslint-env browser */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\nconst CSS_PREFIXES = ['Webkit', 'O', 'Moz', 'ms'];\nconst PREFIXED_EVENT_NAMES = {\n\ttransition: 'transitionend',\n\tMozTransition: 'mozTransitionEnd',\n\tOTransition: 'oTransitionEnd',\n\tWebkitTransition: 'webkitTransitionEnd',\n};\nconst PREFIXED_PROP_CACHE = {};\n\nexport const TRANSITION_END_EVENT = PREFIXED_EVENT_NAMES[getVendorProp('transition')];\n\n/**\n * ------------------------------------------------------------------------\n * Public methods\n * ------------------------------------------------------------------------\n */\n\n/**\n * Trigger a reflow on an element.\n *\n * @method reflow\n * @param {HTMLElement} element the element to reflow\n */\nexport function reflow(element) {\n\t// eslint-disable-next-line no-unused-expressions\n\telement.offsetHeight;\n}\n\n/**\n * Set a style property of an element.\n *\n * @method style\n * @param {HTMLElement} element the element on which to set the style property.\n * @param {string} prop the CSS property to set.\n * @param {string|number} value the value to set.\n */\nexport function style(element, prop, value) {\n\telement.style[getVendorProp(prop)] = value;\n}\n\n/**\n * Set multiple style properties of an element.\n *\n * @method styles\n * @param {HTMLElement} element the element on which to set the style property.\n * @param {Object<string, Any>} props a hash of CSS properties and values to set.\n */\nexport function styles(element, props) {\n\tfor (let i = 0, keys = Object.keys(props), {length} = keys; i < length; i++) {\n\t\tstyle(element, keys[i], props[keys[i]]);\n\t}\n}\n\n/**\n * Get the camel case vendor prefixed version of a style attribute, if the browser doesn't support the unprefixed one.\n *\n * @method getVendorProp\n * @param {string} name the unprefixed camel case attribute\n * @return {string} the attribute supported by the browser\n */\nfunction getVendorProp(name) {\n\tif (PREFIXED_PROP_CACHE[name]) {\n\t\treturn PREFIXED_PROP_CACHE[name];\n\t}\n\n\tif (!(name in document.body.style)) {\n\t\tfor (let i = 0, {length} = CSS_PREFIXES; i < length; i++) {\n\t\t\tconst vendorName = `${CSS_PREFIXES[i]}${name.charAt(0).toUpperCase()}${name.slice(1)}`;\n\n\t\t\tif (vendorName in document.body.style) {\n\t\t\t\tPREFIXED_PROP_CACHE[name] = vendorName;\n\t\t\t\treturn vendorName;\n\t\t\t}\n\t\t}\n\t}\n\tPREFIXED_PROP_CACHE[name] = name;\n\treturn name;\n}\n\n/**\n * Get the kebab case version of a style attribute, unprefixed if the browser support it, prefixed otherwise.\n *\n * @method getVendorCSSProp\n * @param {String} name the unprefixed camel case attribute\n * @return {String} the attribute supported by the browser\n */\nexport function getVendorCSSProp(name) {\n\treturn getVendorProp(name)\n\t\t.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`)\n\t\t.replace(/^ms-/, '-ms-');\n}\n\n/**\n * Execute a start function that trigger a transition, and if an end function is defined,\n * call it when the transition is over, for the given property.\n *\n * @method transition\n * @param {HTMLElement} element The element that will transition when the start function is called\n * @param {function} start a function that trigger the transition on element\n * @param {function} end the function to call when the transition ends\n * @param {boolean} immediate true to call the end function immediatly\n * @param {string} property the property that transition; end function will be called only at the end of the transition on that property\n */\nexport function transition(element, start, end, immediate, property) {\n\tif (end) {\n\t\tif (immediate) {\n\t\t\tsetTimeout(end);\n\t\t} else {\n\t\t\tconst handler = event => {\n\t\t\t\tif (!property || event.propertyName === getVendorCSSProp(property)) {\n\t\t\t\t\tend(event);\n\t\t\t\t\telement.removeEventListener(TRANSITION_END_EVENT, handler);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\telement.addEventListener(TRANSITION_END_EVENT, handler);\n\t\t}\n\t}\n\tstart();\n}\n","/* eslint-env jasmine, jquery, browser */\n\nimport debounce from 'mout/function/debounce';\nimport clamp from 'mout/math/clamp';\nimport {reflow, transition, style, styles, getVendorCSSProp} from './util';\n\n/*\n * ------------------------------------------------------------------------\n * Global variables\n * ------------------------------------------------------------------------\n */\n\n/**\n * Used to generate sequential id to save active UProgresses in allProgress\n * @private\n * @type {number}\n */\nlet keyCounter = 0;\n/**\n * Store active UProgresses (so the resize listener can be shared across instances)\n *\n * @private\n * @type {Object}\n */\nconst allUProgress = {};\n/**\n * Default options for all new {@link UProgress} instances.\n *\n * @private\n * @type {Object}\n * @see UProgress.default\n */\nconst DEFAULT = Object.seal({\n\trtl: false,\n\tstart: 0.01,\n\tend: 0.99,\n\tduration: 25000,\n\tdoneDuration: 100,\n\tfadeDuration: 200,\n\tclass: 'uprogress',\n\tbarClass: 'bar',\n\tblurClass: 'blur',\n\tresizeDebounce: 300,\n});\n/**\n * Global function registered once to the window `resize` event. On window `resize` event, calls {@link UProgress#refresh} for each exixsting instances.\n * Debounced with threshold defined in `UProgress.Default.resizeDebounce`.\n *\n * @private\n * @type {function}\n */\nconst _onResize = debounce(() => {\n\tfor (let i = 0, keys = Object.keys(allUProgress), {length} = keys; i < length; i++) {\n\t\tconst uProgress = allUProgress[keys[i]];\n\n\t\tif (uProgress._parent.contains(uProgress._wrapper)) {\n\t\t\tuProgress.refresh();\n\t\t} else {\n\t\t\tuProgress.destroy();\n\t\t}\n\t}\n}, DEFAULT.resizeDebounce);\n\n/*\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\n/**\n * Creates and control a µProgress.\n * @class\n */\nclass UProgress {\n\t/**\n\t * - Create a new UProgress instance.\n\t * - Create a `div` for the µProgress and add it to the `parent`.\n\t * - Register to the `resize` event.\n\t *\n\t * @instance\n\t * @constructor\n\t * @param {HTMLElement} [parent=document.body] The `HTMLElement` on which the µProgress will stand on top of.\n\t * @param {Object} [opts] The µProgress configutation.\n\t * @param {boolean} [rtl=false] `true` to move the µProgress from right to left, `false` for left to right.\n\t * @param {number} [opts.start=0.01] The position in percentage (.35 is 35%, 1 is 100%) at which the µProgress starts.\n\t * @param {number} [opts.end=0.99] The position in percentage (.35 is 35%, 1 is 100%) the µProgress is moving toward when started. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called.\n\t * @param {number} [opts.duration=25000] The durarion in ms it takes for the µProgress to go from `opts.start` to `opts.end`.\n\t * @param {number} [opts.doneDuration=100] The duration in ms that the µProgress take to complete when {@link UProgress#done} is called.\n\t * @param {number} [opts.fadeDuration=200] The duration in ms the µProgress takes to fade out after it has completed.\n\t * @param {number} [opts.class='uprogress'] The CSS class to set on the µProgress element.\n\t * @param {number} [opts.barClass='bar'] The CSS class to set on the µProgress bar element.\n\t * @param {number} [opts.blurClass='blur'] The CSS class to set on the µProgress blur element.\n\t *\n\t * @example\n\t * Create a new µProgress on top of the viewport with default options.\n\t * ```javascript\n\t * const uProgress = new UProgress();\n\t * uProgress.start();\n\t * ```\n\t *\n\t * @example\n\t * Create a new µProgress on top of a modal with default options.\n\t * ```javascript\n\t * const uProgress = new UProgress(document.getElementById('my-modal'));\n\t * uProgress.start();\n\t * ```\n\t *\n\t * @example\n\t * Create a new µProgress on top of the viewport with custom options.\n\t * ```javascript\n\t * const uProgress = new UProgress({\n\t *   start: 0.05,\n\t *   duration: 30000\n\t * });\n\t * uProgress.start();\n\t * ```\n\t */\n\tconstructor(parent = document.body, opts) {\n\t\tthis._wrapper = document.createElement('div');\n\t\tthis._progressbar = document.createElement('div');\n\t\tthis._blur = document.createElement('div');\n\t\tif (arguments.length === 1 && !(parent instanceof HTMLElement)) {\n\t\t\tthis._parent = document.body;\n\t\t\tthis._options(parent, DEFAULT);\n\t\t} else {\n\t\t\tthis._options(opts, DEFAULT);\n\t\t\tthis._parent = parent;\n\t\t}\n\t\tthis._progressbar.className = this._opts.barClass;\n\t\tthis._progressbar.setAttribute('role', 'bar');\n\t\tthis._wrapper.appendChild(this._progressbar);\n\t\tthis._blur.className = this._opts.blurClass;\n\t\tthis._progressbar.appendChild(this._blur);\n\t\tthis._width =\n\t\t\tthis._parent === document.body\n\t\t\t\t? Math.min(\n\t\t\t\t\t\tdocument.body.scrollWidth,\n\t\t\t\t\t\tdocument.documentElement.clientWidth,\n\t\t\t\t\t\tdocument.documentElement.offsetWidth\n\t\t\t\t  )\n\t\t\t\t: this._parent.clientWidth;\n\t\tthis._key = keyCounter;\n\t\tthis._started = false;\n\t\tthis._completing = false;\n\t\tthis._destroyed = false;\n\t\tthis._to = null;\n\t\tthis._from = null;\n\t\tthis._duration = null;\n\t\tthis._end = null;\n\t\tthis._rtl = false;\n\t\tstyles(this._wrapper, {\n\t\t\twidth: `${this._width}px`,\n\t\t\tposition: this._parent === document.body ? 'fixed' : 'absolute',\n\t\t});\n\t\tstyles(this._progressbar, {\n\t\t\tvisibility: 'hidden',\n\t\t\twidth: `${this._width}px`,\n\t\t});\n\t\tthis._parent.appendChild(this._wrapper);\n\t\tif (Object.keys(allUProgress).length === 0) {\n\t\t\twindow.addEventListener('resize', _onResize);\n\t\t}\n\t\tallUProgress[this._key] = this;\n\t\tkeyCounter += 1;\n\t}\n\n\t/*\n   * ------------------------------------------------------------------------\n   * Public methods\n   * ------------------------------------------------------------------------\n   */\n\n\t/**\n\t * Display the µProgress and start its progress from `opts.start` to `opts.end` at a speed corresponding to `opts.duration`. Has no effect if the µProgress is already started.\n\t *\n\t * @method start\n\t * @memberof UProgress\n\t * @instance\n\t * @return {boolean} `true` if the µProgress has started, `false` otherwise.\n\t *\n\t * @example\n\t * Start the µProgress.\n\t * ```javascript\n\t * const uProgress = new UProgress();\n\t * uProgress.start();\n\t * // true\n\t * ```\n\t */\n\tstart() {\n\t\tif (!this._started && !this._completing) {\n\t\t\tthis._from = this._opts.start;\n\t\t\tthis._rtl = this._opts.rtl;\n\t\t\tthis._wrapper.className = `${this._opts.class}${this._rtl ? ' rtl' : ''}`;\n\t\t\t// Initialize µProgress and position it at 'start'\n\t\t\tstyles(this._progressbar, {\n\t\t\t\ttransition: 'none',\n\t\t\t\ttransform: `translateX(${this._targetToPosition(this._opts.start)}px)`,\n\t\t\t\topacity: 1,\n\t\t\t\tvisibility: 'visible',\n\t\t\t});\n\t\t\treflow(this._progressbar);\n\t\t\tthis._started = true;\n\t\t\treturn this._set(this._opts.duration, this._opts.end);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Change the µProgress `target` and the speed at which it reaches it. Useful to give a more accurate progress of multiple sequentials tasks.\n\t * If the value of `duration` parameter is equal or greater than 1, then the µProgress will automatically fade out once it reaches 100% progress (equivalent to calling {@link UProgress#done} with `opts.doneDuration` = `duration`).\n\t *\n\t * @method set\n\t * @memberof UProgress\n\t * @instance\n\t * @param {number} duration The duration in ms the µProgress will take to reach its `target`.\n\t * @param {number} [target] The position in percentage (.35 is 35%, 1 is 100%) the µProgress will moving toward. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called. If `undefined` or `null`, the µProgress target will stay the same.\n\t * @param {boolean} [force=false] `true` to set the requested `target` even if ti makes the µProgress moves backward.\n\t * @return {boolean} `true` if the µProgress `duration` or `target` has been changed, `false` otherwise.\n\t *\n\t * @example\n\t * Update µProgress speed based on tasks progress.\n\t * ```javascript\n\t * // doHeavyTask calls a callback when done and is expected to takes up to 7s\n\t * // doLightTask calls a callback when done and is expected to takes up to 3s\n\t * const uProgress = new UProgress({\n\t *   duration: 7000\n\t *   end: 0.7\n\t * });\n\t * uProgress.start();\n\t * doHeavyTask(() => {\n\t *   // when heavy task is done\n\t *   uProgress.set(3000, .99);\n\t *   doLightTask(() => {\n\t *     // When light task is done\n\t *     uProgress.done();\n\t *   });\n\t * });\n\t * ```\n\t */\n\tset(duration, target = this._to, force = false) {\n\t\tif (this._started && !this._completing) {\n\t\t\tif (target !== null && target >= 1) {\n\t\t\t\treturn this._done(false, duration, this._opts.fadeDuration);\n\t\t\t}\n\t\t\tif (target === null || force || this._status().progress < target) {\n\t\t\t\treturn this._set(duration, target === null ? this._to : Math.max(target, this._opts.start), force);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Gracefully complete the µProgress by moving quickly to 100% progress and then fading out. It will moves to 100% at the speed corresponding to `opts.doneDuration` and then fade out with the duration of `opts.fadeDuration`.\n\t * Has no effect if the µProgress is not started or if {@link UProgress#done}).\n\t *\n\t * @method done\n\t * @memberof UProgress\n\t * @instance\n\t * @param  {boolean} destroy `true` to automatically call {@link UProgress#destroy} once the µProgress has completed.\n\t * @return {boolean} `true` if the µProgress is going to be completed, `false` otherwise.\n\t *\n\t * @example\n\t * Complete the µProgress once the monitored task is done.\n\t * ```javascript\n\t * // `doTask` calls a callback when done\n\t * const uProgress = new UProgress();\n\t * uProgress.start();\n\t * doTask(() => {\n\t *   // when task is done,\n\t *   uProgress.done();\n\t * });\n\t * ```\n\t */\n\tdone(destroy) {\n\t\treturn this._done(destroy, this._opts.doneDuration, this._opts.fadeDuration);\n\t}\n\n\t/**\n\t * Status of the µProgress instance.\n\t *\n\t * @typedef {Object} Status\n\t * @memberof UProgress\n\t * @inner\n\t * @property {number} target The position in percentage (.35 is 35%, 1 is 100%) the µProgress is moving toward. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called.\n\t * @property {number} duration The duration in ms left to reach the position `Status.target`. Only returned if the µProgress is started.\n\t * @property {number} progress The current progress in percentage (.35 is 35%, 1 is 100%). Only returned if the µProgress is started.\n\t */\n\n\t/**\n\t * Get the {@link UProgress~Status} of the µProgress if it's not destroyed, `false` otherwise.\n\t *\n\t * @method status\n\t * @memberof UProgress\n\t * @instance\n\t * @return {Status|boolean} The current {@link UProgress~Status} or `false`.\n\t *\n\t * @example\n\t * Get the status.\n\t * ```javascript\n\t * const uProgress = new UProgress({duration: 20000});\n\t * uProgress.start();\n\t * setTimeout(() => {\n\t *   uProgress.status();\n\t *   // {target: 0.99, duration: 15000, progress: 0.25}\n\t * }, 5000);\n\t * ```\n\t */\n\tstatus() {\n\t\treturn this._destroyed ? false : this._status();\n\t}\n\n\t/**\n\t * Update the µProgress instance configuration.\n\t *\n\t * @method options\n\t * @memberof UProgress\n\t * @instance\n\t * @param {Object} [opts] The µProgress configutation.\n\t * @param {boolean} [rtl=false] `true` to move the µProgress from right to left, `false` for left to right.Will be used on next call to {@link UProgress#start}.\n\t * @param {number} [opts.start=0.01] The position in percentage (.35 is 35%, 1 is 100%) at which the µProgress starts. Will be used on next call to {@link UProgress#start}.\n\t * @param {number} [opts.end=0.99] The position in percentage (.35 is 35%, 1 is 100%) the µProgress is moving toward when started. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called. Will be used on next call to {@link UProgress#start}.\n\t * @param {number} [opts.duration=25000] The durarion in ms it takes for the µProgress to go from `opts.start` to `opts.end`. Will be used on next call to {@link UProgress#start}.\n\t * @param {number} [opts.doneDuration=100] The duration in ms that the µProgress take to complete when {@link UProgress#done} is called. Will be used on next call to {@link UProgress#done}.\n\t * @param {number} [opts.fadeDuration=200] The duration in ms the µProgress takes to fade out after it has completed. Will be used on next call to {@link UProgress#done}.\n\t * @param {number} [opts.class='uprogress'] The CSS class to set on the the µProgress element. Will be applied right away.\n\t * @param {number} [opts.barClass='bar'] The CSS class to set on the the µProgress bar element. Will be applied right away.\n\t * @param {number} [opts.blurClass='blur'] The CSS class to set on the the µProgress blur element. Will be applied right away.\n\t * @return {UProgress} this, chainable\n\t *\n\t * @example\n\t * Change duration.\n\t * ```javascript\n\t * const uProgress = new UProgress();\n\t * uProgress.options({duration: 20000}).start();\n\t * setTimeout(() => {\n\t *   uProgress.status();\n\t *   // {target: 0.99, duration: 5000, progress: 0.75}\n\t * }, 15000);\n\t * ```\n\t */\n\toptions(opts) {\n\t\tthis._options(opts);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Update the µProgress with and position based on its parent width. This methods is automatically called on a window `resize` event. However it has to be called manually if the parent container width changes for a reason other than a window resize.\n\t *\n\t * @method refresh\n\t * @memberof UProgress\n\t * @instance\n\t *\n\t * @example\n\t * Create a new µProgress on top of a modal and change it's width.\n\t * ```javascript\n\t * const uProgress = new UProgress(document.getElementById('my-modal'));\n\t * // Modify the modal content (i.e. refresh content with Ajax)\n\t * changeModalContent();\n\t * uProgress.refresh();\n\t * ```\n\t */\n\trefresh() {\n\t\tconst parentWidth =\n\t\t\tthis._parent === document.body\n\t\t\t\t? Math.min(\n\t\t\t\t\t\tdocument.body.scrollWidth,\n\t\t\t\t\t\tdocument.documentElement.clientWidth,\n\t\t\t\t\t\tdocument.documentElement.offsetWidth\n\t\t\t\t  )\n\t\t\t\t: this._parent.clientWidth;\n\n\t\tif (parentWidth !== this._width) {\n\t\t\tconst transitionProgress =\n\t\t\t\t1 - this._progressbar.getBoundingClientRect().left / (this._width * (this._rtl ? 1 : -1));\n\n\t\t\tthis._width = parentWidth;\n\t\t\tstyle(this._wrapper, 'width', `${this._width}px`);\n\t\t\tstyle(this._progressbar, 'width', `${this._width}px`);\n\t\t\tif (this._started) {\n\t\t\t\tstyles(this._progressbar, {\n\t\t\t\t\ttransition: 'none',\n\t\t\t\t\ttransform: `translateX(${this._targetToPosition(transitionProgress)}px)`,\n\t\t\t\t});\n\t\t\t\treflow(this._progressbar);\n\t\t\t\tstyles(this._progressbar, {\n\t\t\t\t\ttransition: `${getVendorCSSProp('transform')} ${this._status().duration}ms linear`,\n\t\t\t\t\ttransform: `translateX(${this._targetToPosition(this._to)}px)`,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * - Remove the µProgress from the DOM.\n\t * - Remove the `resize` event listener if this is the only non-destroyed instance.\n\t *\n\t * @method destroy\n\t * @memberof UProgress\n\t * @instance\n\t */\n\tdestroy() {\n\t\tif (!this._destroyed) {\n\t\t\tif (this._wrapper.parentNode === this._parent) {\n\t\t\t\tthis._parent.removeChild(this._wrapper);\n\t\t\t}\n\t\t\tdelete allUProgress[this._key];\n\t\t\tif (Object.keys(allUProgress).length === 0) {\n\t\t\t\twindow.removeEventListener('resize', _onResize);\n\t\t\t\t_onResize.cancel();\n\t\t\t}\n\t\t\tthis._started = false;\n\t\t\tthis._destroyed = true;\n\t\t}\n\t}\n\n\t/*\n   * ------------------------------------------------------------------------\n   * Private methods\n   * ------------------------------------------------------------------------\n   */\n\n\t/**\n\t * Update the µProgress instance configuration.\n\t *\n\t * @method _options\n\t * @private\n\t * @memberof UProgress\n\t * @instance\n\t * @param {Object} opts New options to set.\n\t * @param {Object} [base=this._opts] Options to use when not defined in `opts`.\n\t */\n\t_options(opts, base = this._opts) {\n\t\tthis._opts = Object.assign({}, base, opts);\n\t\tthis._opts.start = clamp(this._opts.start, 0, 0.99);\n\t\tthis._opts.end = clamp(this._opts.end, this._opts.start, 1);\n\t\tthis._opts.doneDuration = Math.max(this._opts.doneDuration, 0);\n\t\tthis._opts.fadeDuration = Math.max(this._opts.fadeDuration, 0);\n\t\tif (opts && opts.class) {\n\t\t\tthis._wrapper.className = `${this._opts.class}`;\n\t\t}\n\t\tif (opts && opts.blurClass) {\n\t\t\tthis._blur.className = this._opts.blurClass;\n\t\t}\n\t\tif (opts && opts.barClass) {\n\t\t\tthis._progressbar.className = this._opts.barClass;\n\t\t}\n\t}\n\n\t/**\n\t * Change the µProgress `target` and the speed at which it reaches it.\n\t *\n\t * @method _set\n\t * @private\n\t * @memberof UProgress\n\t * @instance\n\t * @param {number} [duration=null] The duration in ms the µProgress will take to reach its `target`.\n\t * @param {number} [target=this._to] The position in percentage (.35 is 35%, 1 is 100%) the µProgress will moving toward.\n\t * @return {boolean} `true` if the µProgress `duration` or `target` has been changed, `false` otherwise.\n\t */\n\t_set(duration = null, target = this._to) {\n\t\tif (duration !== null && !this._destroyed) {\n\t\t\tif (target === this._to) {\n\t\t\t\t// Stop the transition by setting the target position to the current one\n\t\t\t\tstyle(this._progressbar, 'transform', `translateX(${this._progressbar.getBoundingClientRect().left}px)`);\n\t\t\t\treflow(this._progressbar);\n\t\t\t}\n\t\t\tthis._duration = Math.max(duration, 0);\n\t\t\tthis._to = target;\n\t\t\tthis._end = Date.now() + this._duration;\n\t\t\tthis._from = this._status().progress;\n\t\t\tstyles(this._progressbar, {\n\t\t\t\ttransition: this._duration > 0 ? `${getVendorCSSProp('transform')} ${this._duration}ms linear` : 'none',\n\t\t\t\ttransform: `translateX(${this._targetToPosition(this._to)}px)`,\n\t\t\t});\n\t\t\treflow(this._progressbar);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get the {@link UProgress~Status} of the µProgress.\n\t *\n\t * @method _status\n\t * @private\n\t * @memberof UProgress\n\t * @instance\n\t * @return {Status} The current {@link UProgress~Status}.\n\t */\n\t_status() {\n\t\tif (!this._started) {\n\t\t\treturn {target: this._opts.end};\n\t\t}\n\t\tconst duration = Math.max(0, this._end - Date.now());\n\n\t\treturn {\n\t\t\ttarget: this._to,\n\t\t\tduration,\n\t\t\tprogress: this._from + (this._to - this._from) * (1 - (this._duration <= 0 ? 0 : duration / this._duration)),\n\t\t};\n\t}\n\n\t/**\n\t * Gracefully complete the µProgress by moving quickly to 100% progress and then fading out.\n\t *\n\t * @method _done\n\t * @private\n\t * @memberof UProgress\n\t * @instance\n\t * @param  {boolean} destroy `true` to automatically call {@link UProgress#destroy} once the µProgress has completed.\n\t * @param {number} doneDuration The duration in ms that the µProgress take to complete.\n\t * @param {number} fadeDuration The duration in ms the µProgress takes to fade out after it has completed.\n\t * @return {boolen} `true` if the µProgress is going to be completed, `false` otherwise.\n\t */\n\t_done(destroy, doneDuration, fadeDuration) {\n\t\tif (this._started && !this._destroyed && !this._completing) {\n\t\t\tthis._completing = true;\n\t\t\ttransition(\n\t\t\t\tthis._progressbar,\n\t\t\t\t() => {\n\t\t\t\t\tthis._set(doneDuration, 1);\n\t\t\t\t},\n\t\t\t\t() =>\n\t\t\t\t\ttransition(\n\t\t\t\t\t\tthis._progressbar,\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tthis._started = false;\n\t\t\t\t\t\t\tstyles(this._progressbar, {\n\t\t\t\t\t\t\t\ttransition: fadeDuration > 0 ? `opacity ${fadeDuration}ms linear` : 'none',\n\t\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treflow(this._progressbar);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tif (destroy) {\n\t\t\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstyle(this._progressbar, 'visibility', 'hidden');\n\t\t\t\t\t\t\t\tthis._to = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._completing = false;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfadeDuration <= 0,\n\t\t\t\t\t\t'opacity'\n\t\t\t\t\t),\n\t\t\t\tdoneDuration <= 0,\n\t\t\t\t'transform'\n\t\t\t);\n\t\t} else if (destroy) {\n\t\t\tthis.destroy();\n\t\t\treturn this._started;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Convert a target (in percentage) to a pixel position.\n\t *\n\t * @method _targetToPosition\n\t * @private\n\t * @param {number} target The target to convert (number between 0 and 1).\n\t * @return {number} The position in pixel corresponding to the given target.\n\t */\n\t_targetToPosition(target) {\n\t\treturn this._width * (1 - target) * (this._rtl ? 1 : -1);\n\t}\n}\n\n/**\n * The default options for all new µProgress instances.\n *\n * @name Default\n * @memberof UProgress\n * @static\n * @constant\n * @default\n * @readonly\n * @type {Object}\n * @property {boolean} [rtl=false] `true` to move the µProgress from right to left, `false` for left to right.\n * @property {number} [start=0.01] The position in percentage (.35 is 35%, 1 is 100%) at which the µProgress starts.\n * @property {number} [end=0.99] The position in percentage (.35 is 35%, 1 is 100%) the µProgress is moving toward when started. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called.\n * @property {number} [duration=2500] The durarion in ms it takes for the µProgress to go from `start` to `end`.\n * @property {number} [doneDuration=100] The duration in ms that the µProgress take to complete when {@link UProgress#done} is called.\n * @property {number} [fadeDuration=200] The duration in ms the µProgress takes to fade out after it has completed.\n * @property {number} [class='uprogress'] The CSS class to set on the the µProgress element.\n * @property {number} [blurClass='blur'] The CSS class to set on the the µProgress blur element.\n * @property {number} [barClass='bar'] The CSS class to set on the the µProgress bar element.\n * @property {number} [resizeDebounce=300] the debounce threshold after which a window `resize` event trigger a call to {@link UProgress#refresh}.\n *\n * @example\n * Change default options\n * ```javascript\n * UProgress.Default.duration = 3000;\n * UProgress.Default.class = 'custom-uprogress';\n * ```\n */\n/* eslint-disable-next-line prefer-reflect */\nObject.defineProperty(UProgressAPI, 'Default', {\n\tget() {\n\t\treturn DEFAULT;\n\t},\n});\n\n/**\n * Wrap an instance of {@link UProgress} in a closure to exposed only public methods, and hide private attributes.\n *\n * @method UProgressAPI\n * @private\n * @param {...Any} args arguments passed to {@link UProgress#constrcutor}.\n * @constructor\n */\nexport default function UProgressAPI(...args) {\n\tconst uProgress = new UProgress(...args);\n\tconst self = {};\n\n\tfor (\n\t\tlet i = 0, PUBLIC_METHODS = ['start', 'done', 'set', 'status', 'refresh', 'destroy'], {length} = PUBLIC_METHODS;\n\t\ti < length;\n\t\ti++\n\t) {\n\t\tself[PUBLIC_METHODS[i]] = uProgress[PUBLIC_METHODS[i]].bind(uProgress);\n\t}\n\tself.options = (...chainableArgs) => {\n\t\tuProgress.options(...chainableArgs);\n\t\treturn self;\n\t};\n\treturn Object.freeze(self);\n}\n"]}